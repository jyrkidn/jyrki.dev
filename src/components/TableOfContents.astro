---
interface Props {
    headings: { depth: number; slug: string; text: string }[];
}

const { headings } = Astro.props;

// Filter to only show h2 and h3 headings
const tocHeadings = headings.filter(h => h.depth <= 3);
---

<nav class="toc lg:sticky top-8 lg:max-h-[calc(100vh-4rem)] lg:overflow-y-auto">
    <h2 class="text-2xl lg:text-sm font-semibold text-gray-900 mb-4">On this page</h2>
    <ul class="space-y-2 text-sm">
        {tocHeadings.map((heading) => (
            <li
                class:list={[
                    "border-0 lg:border-l-2 border-gray-200 transition-colors duration-200",
                    { "lg:pl-4": heading.depth === 2, "pl-4 lg:pl-8": heading.depth === 3 }
                ]}
                data-heading-id={heading.slug}
            >
                <a
                    href={`#${heading.slug}`}
                    class="block py-1 text-gray-600 hover:text-indigo-600 transition-colors"
                >
                    {heading.text}
                </a>
            </li>
        ))}
    </ul>
</nav>

<script>
    // Intersection Observer for scroll-based highlighting
    function initTOC() {
        const headings = document.querySelectorAll('article h2, article h3');
        const tocItems = document.querySelectorAll('.toc li');

        const observerOptions = {
            rootMargin: '-80px 0px -66%',
            threshold: 0
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                const id = entry.target.id;
                const tocItem = document.querySelector(`.toc li[data-heading-id="${id}"]`);

                if (entry.isIntersecting) {
                    // Remove active class from all items
                    tocItems.forEach(item => {
                        item.classList.remove('border-indigo-600');
                        item.classList.add('border-gray-200');
                        const link = item.querySelector('a');
                        if (link) {
                            link.classList.remove('text-indigo-600', 'font-medium');
                            link.classList.add('text-gray-600');
                        }
                    });

                    // Add active class to current item
                    if (tocItem) {
                        tocItem.classList.remove('border-gray-200');
                        tocItem.classList.add('border-indigo-600');
                        const link = tocItem.querySelector('a');
                        if (link) {
                            link.classList.remove('text-gray-600');
                            link.classList.add('text-indigo-600', 'font-medium');
                        }
                    }
                }
            });
        }, observerOptions);

        headings.forEach(heading => observer.observe(heading));
    }

    // Initialize on page load
    initTOC();

    // Re-initialize on view transitions (if you're using Astro's view transitions)
    document.addEventListener('astro:page-load', initTOC);
</script>

